import{_ as n,c as s,o as a,d as t}from"./app.912614e9.js";const _='{"title":"\u5C06\u6570\u5B57 12345678 \u8F6C\u5316\u6210 RMB \u5F62\u5F0F \u5982\uFF1A 12,345,678","description":"","frontmatter":"title JS \u5C06\u6570\u5B57 12345678 \u8F6C\u5316\u6210 RMB\u5F62\u5F0F \u5982\uFF1A 12,345,678","headers":[],"relativePath":"Technology/JS/48.md","lastUpdated":1649160076181}',p={},o=t(`<h1 id="\u5C06\u6570\u5B57-12345678-\u8F6C\u5316\u6210-rmb-\u5F62\u5F0F-\u5982\uFF1A-12-345-678" tabindex="-1">\u5C06\u6570\u5B57 12345678 \u8F6C\u5316\u6210 RMB \u5F62\u5F0F \u5982\uFF1A 12,345,678 <a class="header-anchor" href="#\u5C06\u6570\u5B57-12345678-\u8F6C\u5316\u6210-rmb-\u5F62\u5F0F-\u5982\uFF1A-12-345-678" aria-hidden="true">#</a></h1><div class="language-js"><pre><code><span class="token comment">//\u601D\u8DEF\uFF1A\u5148\u5C06\u6570\u5B57\u8F6C\u4E3A\u5B57\u7B26\uFF0C str= str + &#39;&#39; ;</span>
<span class="token comment">//\u5229\u2F64\u53CD\u8F6C\u51FD\u6570\uFF0C\u6BCF\u4E09\u4F4D\u5B57\u7B26\u52A0\u2F00\u4E2A &#39;,&#39;\u6700\u540E\u2F00\u4F4D\u4E0D\u52A0\uFF1B re()\u662F\u2F83\u5B9A\u4E49\u7684\u53CD\u8F6C\u51FD\u6570\uFF0C\u6700\u540E\u518D\u53CD\u8F6C\u56DE\u53BB\uFF01</span>
<span class="token keyword">function</span> <span class="token function">re</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  str <span class="token operator">+=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">toRMB</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">re</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp <span class="token operator">+=</span> <span class="token function">re</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token function">re</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tmp <span class="token operator">+=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">re</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,2),e=[o];function c(u,l,k,r,i,d){return a(),s("div",null,e)}var f=n(p,[["render",c]]);export{_ as __pageData,f as default};
